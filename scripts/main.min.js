!function () {
  "use strict";

  function handleMeasurementClick(e) {
      localStorage.measure = e.target.id;
      t.localStorage = localStorage;
      document.getElementById("ms").classList.remove("active");
      document.getElementById("mh").classList.remove("active");
      document.getElementById("kh").classList.remove("active");
      e.target.classList.add("active");
  }

  document.addEventListener("DOMContentLoaded", function (e) {
      if (t.init(), localStorage && !localStorage.getItem("userClosedHelpModal")) {
          setTimeout(function () {}, 5000);
      } else if (localStorage && localStorage.getItem("userClosedHelpModal")) {
          var n = localStorage.getItem("userClosedHelpModal");
          var o = new Date();
          (o.getTime() - n) / 864e5 > 20 && localStorage.removeItem("userClosedHelpModal");
      }
  });

  var t = {};
  t.cache = {};
  t.opts = { maxSpeed: 200 };
  t.utils = {};
  t.localStorage = localStorage;

  t.showHelp = function () {
      document.getElementById("modal").style.display = "block";
  };

  t.initBtnClickListeners = function () {
      document.getElementById("ms").addEventListener("click", handleMeasurementClick);
      document.getElementById("mh").addEventListener("click", handleMeasurementClick);
      document.getElementById("kh").addEventListener("click", handleMeasurementClick);
  };

  t.init = function () {
      t.cache.speed = document.getElementById("speed");
      if (!t.localStorage.measure) {
          localStorage.measure = "kh";
          t.localStorage = localStorage;
      }
      t.initBtnClickListeners();
      document.getElementById("installer").style.display = "none";

      t.writeSpeed = function (e) {
          document.getElementById("error").innerHTML = "";
          document.getElementById("unit").innerHTML = "meter/second";
          var n = e.coords.speed;

          if (t.localStorage.measure === "kh") {
              n = 60 * n * 60 / 1000;
              document.getElementById("unit").innerHTML = "km/h";
          } else if (t.localStorage.measure === "mh") {
              n = 60 * n * 60 * 0.000621371192;
              document.getElementById("unit").innerHTML = "miles/hour";
          }

          n = Math.round(n);
          t.cache.speed.innerHTML = n;
      };

      navigator.geolocation.watchPosition(function (e) {
          t.writeSpeed(e);
          try {
              ga && ga("send", {
                  hitType: "event",
                  eventCategory: "speed",
                  eventAction: "showSpeed",
                  eventLabel: e.coords.speed
              });
          } catch (n) {}

          document.getElementById("lat").innerHTML = "";
          document.getElementById("long").innerHTML = "";
          document.getElementById("info").style.display = "none";
      }, function (e) {
          document.getElementById("speed").innerHTML = "";
          document.getElementById("error").innerHTML = "ERROR(" + e.code + "): " + e.message;
          document.getElementById("lat").innerHTML = "ERROR!!!";
          document.getElementById("info").style.display = "block";

          try {
              ga && ga("send", {
                  hitType: "event",
                  eventCategory: "speed",
                  eventAction: "errorShowSpeed",
                  eventLabel: e.message
              });
          } catch (t) {}
      }, {
          enableHighAccuracy: true,
          maximumAge: 0
      });
  };

  var Installer = function (e) {
      var installPrompt = function (t) {
          t.preventDefault();
          window.install.prompt().then(function (t) {
              try {
                  ga && ga("send", "event", "install", t);
              } catch (n) {}
              e.classList.remove("available");
          }).catch(function (e) {
              try {
                  ga && ga("send", "event", "install", "errored");
              } catch (t) {}
          });
      };

      var checkPromptAvailability = function () {
          window.install.canPrompt().then(function () {
              document.getElementById("installer").style.display = "block";
              e.classList.add("available");
              try {
                  ga && ga("send", "event", "install", "prompted");
              } catch (t) {}
          });
      };

      e.addEventListener("click", installPrompt.bind(this));
      e.addEventListener("touchend", installPrompt.bind(this));
      checkPromptAvailability();
  };

  !function () {
      var installPromise, installDeferred, installAvailable = false;

      window.addEventListener("beforeinstallprompt", function (o) {
          installAvailable = true;
          o.preventDefault();
          installDeferred = o;
          installPromise();
          return false;
      });

      var install = {};
      Object.defineProperty(install, "isAvailable", {
          get: function () {
              return installAvailable;
          }
      });

      install.canPrompt = function () {
          return installPromise;
      };

      install.prompt = function () {
          return new Promise(function (t, o) {
              if (!installAvailable) {
                  o("User Agent decided not to prompt");
              }

              installDeferred.prompt().then(function () {
                  return installDeferred.userChoice;
              }).then(function (e) {
                  t(e.outcome);
              }).catch(function (e) {
                  o(e);
              });
          });
      };

      window.install = install;
  }();

  window.addEventListener("load", function () {
      var installerElement = document.getElementById("installer");
      new Installer(installerElement);
  });
}();