!function () {
    "use strict";

    var t = {
        cache: {},
        opts: { maxSpeed: 200 },
        localStorage: localStorage
    };

    function handleMeasurementClick(e) {
        localStorage.measure = e.target.id;
        document.getElementById("ms").classList.remove("active");
        document.getElementById("mh").classList.remove("active");
        document.getElementById("kh").classList.remove("active");
        e.target.classList.add("active");
    }

    function init() {
        t.cache.speed = document.getElementById("speed");
        if (!t.localStorage.measure) {
            localStorage.measure = "kh"; // Default to kilometers per hour
            t.localStorage = localStorage;
        }
        initBtnClickListeners();
        document.getElementById("installer").style.display = "none";

        // Start tracking speed after location permission is granted
        requestLocation();
    }

    function initBtnClickListeners() {
        document.getElementById("ms").addEventListener("click", handleMeasurementClick);
        document.getElementById("mh").addEventListener("click", handleMeasurementClick);
        document.getElementById("kh").addEventListener("click", handleMeasurementClick);
    }

    function requestLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(onLocationSuccess, onLocationError, {
                enableHighAccuracy: true
            });
        } else {
            displayError("Geolocation is not supported by this browser.");
        }
    }

    function onLocationSuccess(position) {
        // Start watching position to track speed
        navigator.geolocation.watchPosition(onSpeedUpdate, onLocationError, {
            enableHighAccuracy: true,
            maximumAge: 0
        });
    }

    function onSpeedUpdate(position) {
        document.getElementById("error").innerHTML = "";
        document.getElementById("unit").innerHTML = "Meter/second";
        var speed = position.coords.speed; // Speed in meters per second

        // Convert speed based on selected measurement
        if (t.localStorage.measure === "kh") {
            speed = (speed * 3.6); // Convert to km/h
            document.getElementById("unit").innerHTML = "KM/h";
        } else if (t.localStorage.measure === "mh") {
            speed = (speed * 2.23694); // Convert to miles/hour
            document.getElementById("unit").innerHTML = "Miles/hour";
        }

        speed = Math.round(speed);
        t.cache.speed.innerHTML = speed;
    }

    function onLocationError(error) {
        var errorMessage;
        switch (error.code) {
            case error.PERMISSION_DENIED:
                errorMessage = "User denied the request for Geolocation.";
                break;
            case error.POSITION_UNAVAILABLE:
                errorMessage = "Location information is unavailable.";
                break;
            case error.TIMEOUT:
                errorMessage = "The request to get user location timed out.";
                break;
            case error.UNKNOWN_ERROR:
                errorMessage = "An unknown error occurred.";
                break;
        }
        displayError("ERROR(" + error.code + "): " + errorMessage);
    }

    function displayError(message) {
        document.getElementById("speed").innerHTML = "";
        document.getElementById("error").innerHTML = message;
        document.getElementById("lat").innerHTML = "ERROR!!!";
        document.getElementById("info").style.display = "block";
    }

    document.addEventListener("DOMContentLoaded", init);

    // Installer related code (if needed)
    var Installer = function (e) {
        e.addEventListener("click", installPrompt.bind(this));
        e.addEventListener("touchend", installPrompt.bind(this));
        checkPromptAvailability();
    };

    function installPrompt(e) {
        e.preventDefault();
        window.install.prompt().then(function (t) {
            console.log("Install prompt shown:", t);
        }).catch(function (e) {
            console.error("Error showing install prompt:", e);
        });
    }

    function checkPromptAvailability() {
        // Logic to check if the install prompt is available
        // This can include setting display logic for install prompt
    }

    // PWA Install Prompt Handling
    (function () {
        var installAvailable = false;

        window.addEventListener("beforeinstallprompt", function (e) {
            installAvailable = true;
            e.preventDefault();
            // Show install prompt UI
        });
    })();

    window.addEventListener("load", function () {
        var installerElement = document.getElementById("installer");
        new Installer(installerElement);
    });
}();
